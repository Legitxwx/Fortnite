-- Load Notification Library
local notif = loadstring(game:HttpGet("https://raw.githubusercontent.com/insanedude59/notiflib/main/main"))()

-- Initial Welcome Notification
notif:Notification("FFA HUB", "Welcome, " .. game.Players.LocalPlayer.Name .. "!", "GothamSemibold", "Gotham", 4)

-- Countdown Before Loading (3 seconds)
for i = 3, 1, -1 do
    notif:Notification("Loading...", "Initializing UI in " .. i .. "s", "GothamSemibold", "Gotham", 1)
    wait(1)
end

-- Notify Loadstring Execution
notif:Notification("FFA HUB", "Executing FFA HUB...", "GothamSemibold", "Gotham", 3)

-- Load Orion UI Library
local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/jensonhirst/Orion/main/source'))()

-- Post-load Notification
notif:Notification("FFA HUB", "FFA Loaded Successfully!", "GothamSemibold", "Gotham", 3)

-- Create the Main Window
local Window = OrionLib:MakeWindow({
    Name = "FFA HUB", 
    HidePremium = false, 
    SaveConfig = true, 
    IntroText = "Welcome To FFA HUB!",
    ConfigFolder = "FrenzyConfig"
})

-- Create Tabs
local Main = Window:MakeTab({ Name = "Main", Icon = "rbxassetid://4483345998", PremiumOnly = false })
local ESP = Window:MakeTab({ Name = "ESP", Icon = "rbxassetid://4483345998", PremiumOnly = false })

local UpdateSectionTab = Main:AddSection({
	Name = "[UPDATE] HITBOX CHANGE, RADAR FUNCTIONALITY"
})

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local hitboxConnection = nil
local hitboxEnabled = false
local hitboxSize = 50

Main:AddToggle({
	Name = "Big Hitbox",
	Default = false,
	Callback = function(state)
		hitboxEnabled = state

		if hitboxEnabled then
			-- Start applying big hitboxes
			if not hitboxConnection then
				hitboxConnection = RunService.RenderStepped:Connect(function()
					for _, player in pairs(Players:GetPlayers()) do
						if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
							local part = player.Character.HumanoidRootPart
							pcall(function()
								part.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
								part.Transparency = 0.6 -- Semi-transparent so you can see through it
								part.BrickColor = BrickColor.new("Institutional white")
								part.Material = Enum.Material.ForceField
								part.CanCollide = false

								if not part:FindFirstChild("SelectionBox") then
									local sel = Instance.new("SelectionBox")
									sel.Name = "SelectionBox"
									sel.Adornee = part
									sel.LineThickness = 0.05
									sel.Color3 = Color3.fromRGB(255, 255, 255)
									sel.Transparency = 0.1 -- Slight outline for visibility
									sel.Parent = part
								end
							end)
						end
					end
				end)
			end
		else
			-- Disable hitboxes and cleanup
			if hitboxConnection then
				hitboxConnection:Disconnect()
				hitboxConnection = nil
			end

			for _, player in pairs(Players:GetPlayers()) do
				if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
					local part = player.Character.HumanoidRootPart
					pcall(function()
						part.Size = Vector3.new(2, 2, 1)
						part.Transparency = 0
						part.Material = Enum.Material.Plastic
						local sel = part:FindFirstChild("SelectionBox")
						if sel then sel:Destroy() end
					end)
				end
			end
		end
	end
})

-- Fly GUI Script
Main:AddButton({
	Name = "Fly Gui",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
	end    
})

Main:AddTextbox({
	Name = "Speed",
	Default = "16",
	TextDisappear = true,
	Callback = function(Value)
		local speed = tonumber(Value)
		if speed then
			local function applySpeed()
				local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid.WalkSpeed = speed
				end
			end
			applySpeed()
			game.Players.LocalPlayer.CharacterAdded:Connect(function()
				wait(0.1)
				applySpeed()
			end)
		end
	end
})

Main:AddTextbox({
	Name = "Jump Height",
	Default = "50",
	TextDisappear = true,
	Callback = function(Value)
		local jumpHeight = tonumber(Value)
		if jumpHeight then
			local function applyJump()
				local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid.JumpPower = jumpHeight
				end
			end
			applyJump()
			game.Players.LocalPlayer.CharacterAdded:Connect(function()
				wait(0.1)
				applyJump()
			end)
		end
	end
})

-- Teleport To Random Player
Main:AddButton({
	Name = "Teleport To Random Player",
	Callback = function()
		local players = game:GetService("Players"):GetPlayers()
		local localPlayer = game.Players.LocalPlayer
		local others = {}

		for _, p in ipairs(players) do
			if p ~= localPlayer then table.insert(others, p) end
		end

		if #others > 0 then
			local randomPlayer = others[math.random(1, #others)]
			if randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
				localPlayer.Character:SetPrimaryPartCFrame(randomPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(2, 0, 2))
			end
		end
	end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UIS = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

local ESPEnabled = false
local TracerEnabled = false
local RadarEnabled = false

local espConnections = {}
local espDrawings = {}

local tracerLines = {}
local tracerConnection = nil
local tracerGui = nil

local radarDrawings = {}
local radarConnection = nil
local radarGuiConnection = nil
local radarDragConnection = nil

-- === TOGGLE: ESP BOXES ===
ESP:AddToggle({
	Name = "ESP",
	Default = false,
	Callback = function(enabled)
		ESPEnabled = enabled

		-- Cleanup
		for _, d in pairs(espDrawings) do for _, v in pairs(d) do v:Remove() end end
		for _, c in pairs(espConnections) do c:Disconnect() end
		espDrawings = {}
		espConnections = {}

		if not enabled then return end

		-- Function to draw ESP box
		local function CreateESP(player)
			if player == LocalPlayer then return end
			local lines = {}
			for i = 1, 4 do
				local l = Drawing.new("Line")
				l.Color = Color3.fromRGB(255, 0, 0)
				l.Thickness = 2
				l.Transparency = 1
				l.Visible = false
				lines[i] = l
			end
			espDrawings[player] = lines

			local con = RunService.RenderStepped:Connect(function()
				if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") or not player.Character:FindFirstChild("Humanoid") or player.Character.Humanoid.Health <= 0 then
					for _, l in pairs(lines) do l.Visible = false end
					return
				end

				local root = player.Character.HumanoidRootPart
				local pos, onScreen = Camera:WorldToViewportPoint(root.Position)
				if not onScreen then for _, l in pairs(lines) do l.Visible = false end return end

				local size = Vector3.new(2, 3, 0)
				local corners = {
					Camera:WorldToViewportPoint(root.CFrame:PointToWorldSpace(Vector3.new(-size.X, size.Y, 0))),
					Camera:WorldToViewportPoint(root.CFrame:PointToWorldSpace(Vector3.new(size.X, size.Y, 0))),
					Camera:WorldToViewportPoint(root.CFrame:PointToWorldSpace(Vector3.new(size.X, -size.Y, 0))),
					Camera:WorldToViewportPoint(root.CFrame:PointToWorldSpace(Vector3.new(-size.X, -size.Y, 0)))
				}

				lines[1].From = Vector2.new(corners[1].X, corners[1].Y)
				lines[1].To = Vector2.new(corners[2].X, corners[2].Y)

				lines[2].From = lines[1].To
				lines[2].To = Vector2.new(corners[3].X, corners[3].Y)

				lines[3].From = lines[2].To
				lines[3].To = Vector2.new(corners[4].X, corners[4].Y)

				lines[4].From = lines[3].To
				lines[4].To = lines[1].From

				for i = 1, 4 do lines[i].Visible = true end
			end)

			espConnections[player] = con
		end

		for _, p in pairs(Players:GetPlayers()) do CreateESP(p) end
		Players.PlayerAdded:Connect(CreateESP)
	end
})

-- Disconnect ESP on leave
Players.PlayerRemoving:Connect(function(player)
	if espConnections[player] then espConnections[player]:Disconnect() espConnections[player] = nil end
	if espDrawings[player] then
		for _, l in pairs(espDrawings[player]) do l:Remove() end
		espDrawings[player] = nil
	end
end)

-- === TOGGLE: TRACERS ===
ESP:AddToggle({
	Name = "Tracer",
	Default = false,
	Callback = function(enabled)
		TracerEnabled = enabled

		if tracerConnection then tracerConnection:Disconnect() end
		for _, l in pairs(tracerLines) do l:Destroy() end
		tracerLines = {}
		if tracerGui then tracerGui:Destroy() end

		if not enabled then return end

		local function CreateTracerLine()
			local f = Instance.new("Frame")
			f.Name = "TracerLine"
			f.AnchorPoint = Vector2.new(0.5, 0.5)
			f.BackgroundColor3 = Color3.new(1, 1, 1)
			f.BorderSizePixel = 0
			f.Size = UDim2.new(0, 0, 0, 0)
			return f
		end

		tracerGui = Instance.new("ScreenGui")
		tracerGui.Name = "TracerESP"
		tracerGui.ResetOnSpawn = false
		tracerGui.IgnoreGuiInset = true
		tracerGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

		tracerConnection = RunService.RenderStepped:Connect(function()
			local origin = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y * 0.9)
			local index = 1

			for _, player in pairs(Players:GetPlayers()) do
				if player == LocalPlayer or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then continue end
				local pos, visible = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
				if not visible then continue end

				local endPos = Vector2.new(pos.X, pos.Y)
				local line = tracerLines[index]
				if not line then
					line = CreateTracerLine()
					line.Parent = tracerGui
					tracerLines[index] = line
				end

				local dir = (endPos - origin)
				local length = dir.Magnitude
				line.Size = UDim2.new(0, length, 0, 2)
				line.Position = UDim2.new(0, (origin.X + endPos.X) / 2, 0, (origin.Y + endPos.Y) / 2)
				line.Rotation = math.deg(math.atan2(dir.Y, dir.X))
				line.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				line.Visible = true

				index += 1
			end

			for i = index, #tracerLines do
				if tracerLines[i] then
					tracerLines[i]:Destroy()
					tracerLines[i] = nil
				end
			end
		end)
	end
})

-- === BUTTON: RADAR ===
ESP:AddButton({
	Name = "Radar",
	Callback = function()
		if RadarEnabled then
			RadarEnabled = false
			for _, obj in pairs(radarDrawings) do if obj.Remove then obj:Remove() end end
			if radarConnection then radarConnection:Disconnect() end
			if radarGuiConnection then radarGuiConnection:Disconnect() end
			if radarDragConnection then radarDragConnection:Disconnect() end
			radarDrawings = {}
			return
		end

		RadarEnabled = true

		local center = Vector2.new(200, 200)
		local radius = 100

		local radarBack = Drawing.new("Circle")
		radarBack.Color = Color3.fromRGB(10, 10, 10)
		radarBack.Filled = true
		radarBack.Transparency = 0.9
		radarBack.Position = center
		radarBack.Radius = radius
		radarBack.Visible = true
		table.insert(radarDrawings, radarBack)

		local radarBorder = Drawing.new("Circle")
		radarBorder.Color = Color3.fromRGB(75, 75, 75)
		radarBorder.Filled = false
		radarBorder.Transparency = 0.75
		radarBorder.Position = center
		radarBorder.Radius = radius
		radarBorder.Thickness = 3
		radarBorder.Visible = true
		table.insert(radarDrawings, radarBorder)

		local localDot = Drawing.new("Triangle")
		localDot.Visible = true
		localDot.Thickness = 1
		localDot.Filled = true
		localDot.Color = Color3.fromRGB(255, 255, 255)
		local function updateLocalDot()
			localDot.PointA = center + Vector2.new(0, -6)
			localDot.PointB = center + Vector2.new(-3, 6)
			localDot.PointC = center + Vector2.new(3, 6)
		end
		updateLocalDot()
		table.insert(radarDrawings, localDot)

		-- Player dots
		radarConnection = RunService.RenderStepped:Connect(function()
			updateLocalDot()
			local myPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position

			for i = #radarDrawings, 1, -1 do
				if radarDrawings[i].Name == "PlayerDot" then
					radarDrawings[i]:Remove()
					table.remove(radarDrawings, i)
				end
			end

			for _, player in pairs(Players:GetPlayers()) do
				if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and myPos then
					local targetPos = player.Character.HumanoidRootPart.Position
					local offset = (targetPos - myPos) * 0.5
					local relPos = Vector2.new(offset.X, offset.Z)
					if relPos.Magnitude < radius then
						local dot = Drawing.new("Circle")
						dot.Name = "PlayerDot"
						dot.Radius = 3
						dot.Filled = true
						dot.Position = center + relPos
						dot.Color = Color3.fromRGB(255, 0, 0)
						dot.Visible = true
						table.insert(radarDrawings, dot)
					end
				end
			end
		end)

		-- Drag
		local dragging = false
		local offset = Vector2.new()
		radarGuiConnection = UIS.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				local mouse = UIS:GetMouseLocation()
				if (mouse - center).Magnitude <= radius then
					dragging = true
					offset = mouse - center
				end
			end
		end)

		UIS.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
		end)

		radarDragConnection = RunService.RenderStepped:Connect(function()
			if dragging then
				local mouse = UIS:GetMouseLocation()
				center = mouse - offset
			end
		end)
	end
})
